import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;// -------------------------------------------------------------------------/** * * Support serialization from objects to a byte array, and back * * @author Cliff Shaffer -- Taken from the internet * @author Ayaan Kazerouni, revised to remove initializations *      in try statements, to appease Web-CAT's coverage metrics. * * @version Apr 13, 2016 * */public class Serializer {    // ----------------------------------------------------------    /**     *     * Convert an object to a byte array     *     * @param obj     *            The Object     *     * @return a new byte array containing the object in serialized form     *     * @throws IOException     *     */    public static byte[] serialize(Object obj) throws IOException {        byte[] bytes = null;        ByteArrayOutputStream b = new ByteArrayOutputStream();        ObjectOutputStream o = new ObjectOutputStream(b);        o.writeObject(obj);        bytes = b.toByteArray();        o.close();        b.close();        return bytes;    }    // ----------------------------------------------------------    /**     *     * Convert a byte array back into an object     *     * @param bytes     *            The incoming byte array     *     * @return The Object     *     * @throws IOException     *     * @throws ClassNotFoundException     *     */    public static Object deserialize(byte[] bytes)        throws IOException, ClassNotFoundException {        Object obj = null;        ByteArrayInputStream b = new ByteArrayInputStream(bytes);        ObjectInputStream o = new ObjectInputStream(b);        obj = o.readObject();        o.close();        b.close();        return obj;    }}